extends ../layout.pug
block body
  #grid-container.col-12
    #filter-container.container
      .row
        .col-12.col-md-4
          .form-group
            label(for='size-slider') Size
            #size-slider.pipped-slider
        .col-12.col-md-3.offset-md-1
          .form-group
            label(for='datatype-filter') Datatype
            input#datatype-filter.form-control
      .row
        .col-md-8
          .form-group
            label(for='time-slider') Timestamp
            #time-slider.pipped-slider
    #heap-events(style='height: 100%;')
    #pager(style='height: 20px;')
  script(type='text/javascript').
    function MillisecondFormatter(row, cell, value, columnDef, dataContext) {
      if (value) {
        return value.toFixed(3).toString() + ' ms';
      } else {
        return '';
      }
    }
    function AddressFormatter(row, cell, value, columnDef, dataContext) {
      if (value) {
        return '<code>0x' + ('00000000' + value.toString(16)).substr(-8) + '</code>';
      } else {
        return '';
      }
    }
    var columns = [
      {id: 'frame_id', name: 'Frame', field: 'frame_id',
      minWidth: 80, maxWidth: 100,
      cssClass: 'text-right'},
      {id: 'id', name: 'ID', field: 'id',
      sortable: true,
      minWidth: 80, maxWidth: 100,
      cssClass: 'text-right'},
      {id: 'timestamp', name: 'Timestamp', field: 'timestamp',
      sortable: true,
      minWidth: 160, maxWidth: 200,
      formatter: MillisecondFormatter,
      cssClass: 'text-right'},
      {id: 'event', name: 'Event', field: 'event',
      sortable: true,
      minWidth: 100, maxWidth: 120,
      cssClass: 'text-left'},
      {id: 'address', name: 'Address', field: 'address',
      minWidth: 100, maxWidth: 120,
      formatter: AddressFormatter},
      {id: 'size', name: 'Size', field: 'size',
      sortable: true,
      minWidth: 50, maxWidth: 100,
      cssClass: 'text-right'},
      {id: 'associated_storage_size', name: 'Associated', field: 'associated_storage_size',
      sortable: true,
      minWidth: 100, maxWidth: 100,
      cssClass: 'text-right'},
      {id: 'type', name: 'Data Type', field: 'type',
      minWidth: 240, maxWidth: 320,
      sortable: true},
      {id: 'lifetime', name: 'Lifetime', field: 'lifetime',
      sortable: true,
      minWidth: 100, maxWidth: 120,
      formatter: MillisecondFormatter,
      cssClass: 'text-right'},
      {id: 'context', name: 'Context', field: 'context',
      minWidth: 320, maxWidth: 400},
      {id: 'matching_id', name: 'Matching ID', field: 'matching_event_id',
      minWidth: 100, maxWidth: 100}
    ];
    var options = {
      enableCellNavigation: true,
      enableColumnReorder: false,
      autoExpandColumns: true
    };
    var data = [];
    var dataView = new Slick.Data.DataView({ inlineFilters: true });
    var grid = new Slick.Grid("#heap-events", dataView, columns, options);
    grid.setSelectionModel(new Slick.RowSelectionModel());
    var pager = new Slick.Controls.Pager(dataView, grid, $("#pager"));
    grid.onSort.subscribe(function(e, args) {
      var comparer = function(a, b) {
        return (a[args.sortCol.field] > b[args.sortCol.field]) ? 1 : -1;
      }
      dataView.sort(comparer, args.sortAsc);
    });
    dataView.onRowCountChanged.subscribe(function (e, args) {
      grid.updateRowCount();
      grid.render();
    });
    dataView.onRowsChanged.subscribe(function (e, args) {
      grid.invalidateRows(args.rows);
      grid.render();
    });
    function heapEventsFilter(item, args) {
      if (item['timestamp'] < args.minimumTimestamp) {
        return false;
      }
      if (item['timestamp'] > args.maximumTimestamp) {
        return false;
      }
      if (item['size'] < args.minimumSize) {
        return false;
      }
      if (item['size'] > args.maximumSize) {
        return false;
      }
      if (args.datatype_filter) {
        if (!item['type']) {
          return false;
        }
        if (item['type'].indexOf(args.datatype_filter) === -1) {
          return false;
        }
      }
      return true;
    }
    dataView.beginUpdate();
    dataView.setItems(data);
    dataView.setFilter(heapEventsFilter);
    dataView.endUpdate();
    function updateFilter() {
      var sizeValues = $("#size-slider").slider("values");
      var timestampValues = $("#time-slider").slider("values");
      dataView.setFilterArgs({
        minimumSize: sizeValues[0],
        maximumSize: sizeValues[1],
        minimumTimestamp: timestampValues[0],
        maximumTimestamp: timestampValues[1],
        datatype_filter: $("#datatype-filter").val()
      });
      dataView.refresh();
    }
    $("#size-slider").slider({
      animate: false,
      range: true,
      min: 0,
      max: 0,
      values: [0, 0],
      slide: function(event, ui) {
        updateFilter();
      },
      change: function(event, ui) {
        updateFilter();
      }
    }).slider("float", {
      suffix: 'bytes'
    });
    $("#time-slider").slider({
      animate: false,
      range: true,
      min: 0,
      max: 0,
      values: [0, 0],
      slide: function(event, ui) {
        updateFilter();
      },
      change: function(event, ui) {
        updateFilter();
      }
    }).slider("float", {
      suffix: 'ms'
    });
    $("#datatype-filter").keyup(function (e) {
      // clear on Esc
      if (e.which === 27) {
        this.value = "";
      }
      updateFilter();
    });
    function resizeGridContainer() {
      $("#grid-container").height(
        $(window).height() -
        $("#filter-container").outerHeight(true) -
        $("#navbar").outerHeight() -
        $("#page-header").outerHeight() - 105
      );
      grid.resizeCanvas();
    }
    resizeGridContainer();
    $(window).resize(resizeGridContainer);
    $.getJSON('/api/session/#{session.key}/heap_events', function(response) {
      var sizeSliderTicks = 20, timeSliderTicks = 50;
      var data = response;
      var minimumSize = 0, maximumSize = 0;
      $.each(data, function(key, entry) {
        maximumSize = Math.max(entry['size'] || 0, maximumSize);
      });
      maximumSize = Math.ceil(maximumSize / sizeSliderTicks) * sizeSliderTicks;
      $("#size-slider")
        .slider("option", "max", maximumSize)
        .slider("values", [minimumSize, maximumSize])
        .slider("pips", {
          rest: "pip",
          step: (maximumSize - minimumSize) / sizeSliderTicks,
          suffix: 'bytes'
        });
      var minimumTimestamp = 0, maximumTimestamp = 0;
      if (data.length > 0) {
        maximumTimestamp = data[data.length - 1]['timestamp'].toFixed(0);
      }
      maximumTimestamp = Math.ceil(maximumTimestamp / timeSliderTicks) * timeSliderTicks;
      $("#time-slider")
        .slider("option", "max", maximumTimestamp)
        .slider("values", [minimumTimestamp, maximumTimestamp])
        .slider("pips", {
          rest: "pip",
          step: (maximumTimestamp - minimumTimestamp) / timeSliderTicks,
          suffix: 'ms'
        });
        dataView.beginUpdate();
        dataView.setItems(data);
        dataView.setFilterArgs({
          minimumSize: minimumSize,
          maximumSize: maximumSize,
          minimumTimestamp: minimumTimestamp,
          maximumTimestamp: maximumTimestamp,
        });
        dataView.endUpdate();
      });
